/* -----------------------------------------------
 *
 * GENERAL LAYOUT STYLES
 *
 *----------------------------------------------- */

/* ClearFix + Grid Clear
/* We're going to auto replicate clearfix on the .grid class because we can safely assume that we will 
 * want to be clearing grids (because all columns elements will be floated) */

.clearfix:before,
.clearfix:after,
.grid:before,
.grid:after{
  content: "\0020";
  display: block;
  height: 0;
  overflow: hidden;
}
.clearfix:after,
.grid:after{
  clear: both;
}
.clearfix,
.grid{
  zoom: 1;
}

.clear{
  clear: both;
}

/* .grid styles
/* These are basic styles for setting up the grid wrapper */

.grid{
  display: block;
  max-width: $grid-max-width;
  margin: auto;
  padding: $margins * 100%;
}

/* columns */

/* Generalized selector to hit all of the span-x classes, since the margins and floats will be consistent
   on all of these */
   
[class*="span-"]{
    margin-left: $margins * 100%; 
    margin-right: $margins * 100%; 
    float: left;
}

/* Generate the column styles. Commenting outside of the @for loop to avoid duplicate comments

   $inner-margins;

   For every column span but 1, we also need to determine the total number of margins that the element spans
   This is calculated as the total the number of columns, minus one and then multiplied by 2
   
   $col-width
   
   We can determine the actual value that we need to span for each column span.  
   This is calculated by:
      - determining the total number of columns to span 
      - then adding the total number of margins to span */

@for $i from 1 through $column-number{

  $inner-margins: ($i - 1) * 2;
 
  $col-width: ($single-col-width * $i) + ($inner-margins * ( $margins * 100 ) );

  .#{$column-name}-#{$i}{
    width: $col-width * 1%;
  }
  
  $col-width: ($single-padded-col-width * $i) + ($inner-margins * ( $margins * 100 ) );

  .#{$column-name}-#{$i}-pad{
    width: $col-width * 1%;
  }

}

.padded{
    padding: $padding * 1%;
}